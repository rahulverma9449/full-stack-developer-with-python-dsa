Code : BFS Traversal
Send Feedback
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2
***********************
# Write your code here
from collections import deque

def bfsTraversal(graph, v):
    visited = [False] * v  # Mark all vertices as not visited
    result = []  # To store the BFS traversal result

    # Perform BFS for each component of the graph
    for i in range(v):
        if not visited[i]:
            queue = deque()
            queue.append(i)
            visited[i] = True

            while queue:
                vertex = queue.popleft()
                result.append(vertex)

                # Visit all adjacent vertices of the current vertex
                for j in range(v):
                    if graph[vertex][j] == 1 and not visited[j]:
                        queue.append(j)
                        visited[j] = True

    return result


# Main function
v, e = map(int, input().split())  # Read the number of vertices and edges
graph = [[0] * v for _ in range(v)]  # Create an adjacency matrix

# Fill the adjacency matrix based on the input edges
for _ in range(e):
    a, b = map(int, input().split())
    graph[a][b] = 1
    graph[b][a] = 1

# Perform BFS traversal starting from vertex 0
bfs_result = bfsTraversal(graph, v)

# Print the BFS traversal result
for vertex in bfs_result:
    print(vertex, end=' ')
