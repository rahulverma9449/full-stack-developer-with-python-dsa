Kruskal's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5
*********************
## Read input as specified in the question.
## Print output as specified in the question.
 
class Edge:
    def __init__(self, src, dest, weight):
        self.src = src
        self.dest = dest
        self.weight = weight


def getParent(parent, v):
    if parent[v] == v:
        return v
    return getParent(parent, parent[v])


def kruskalMST(graph, V, E):
    graph = sorted(graph, key=lambda edge: edge.weight)
    parent = [i for i in range(V)]
    count = 0
    i = 0
    while count < V - 1:
        currentEdge = graph[i]
        srcParent = getParent(parent, currentEdge.src)
        destParent = getParent(parent, currentEdge.dest)
        if srcParent != destParent:
            parent[srcParent] = destParent
            count += 1
            if currentEdge.src < currentEdge.dest:
                print(str(currentEdge.src) + " " + str(currentEdge.dest) + " " + str(currentEdge.weight))
            else:
                print(str(currentEdge.dest) + " " + str(currentEdge.src) + " " + str(currentEdge.weight))
        i += 1


# Taking input
V, E = map(int, input().split())

graph = []
for _ in range(E):
    src, dest, weight = map(int, input().split())
    edge = Edge(src, dest, weight)
    graph.append(edge)

# Calling the function to find and print the MST
kruskalMST(graph, V, E)
