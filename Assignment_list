What will be the output of following code?
li = [ele**2 for ele in range(5)]
print(li)
Output:
[0,1,4,9,16]
What will be the output of following code?
li = [ele**2 for ele in range(10) if ele%3 ==0]
print(li)
Output:
[0,9,36,81]
What will be the output of following code?
li = [[ i*j for j in range(4)] for i in range(3)]
print(li)
Output:
[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]
***************************************
str=input().split()
n,m=int(str[0]),int(str[1])
li=[[int (j) for j in input().split()]for i in range(n)]

li

#str=input().split()
n=int(input())
li=[[int (j) for j in input().split()]for i in range(n)]

print(li)

********************************
str=input().split()
n,m=int(str[0]),int(str[1])
b=input().split()
arr=[ [int(b[m*i+j])for j in range(m)]for i in range(n)]

arr

str=input().split()
n,m=int(str[0]),int(str[1])
b=str[2:]
arr=[ [int(b[m*i+j])for j in range(m)]for i in range(n)]

arr

************
Row Wise Sum
Send Feedback
For a given two-dimensional integer array/list of size (N x M), find and print the sum of each of the row elements in a single line, separated by a single space.
Input Format :
The first line contains an Integer 't' which denotes the number of test cases or queries to be run. Then the test cases follow.

First line of each test case or query contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively, for the two-dimensional array/list.

Second line onwards, the next 'N' lines or rows represent the ith row values.

Each of the ith row constitutes 'M' column values separated by a single space.
Output Format :
For each test case, print the sum of every ith row elements in a single line separated by a single space.

Output for every test case will be printed in a seperate line.
Constraints :
1 <= t <= 10^2
0 <= N <= 10^3
0 <= M <= 10^3
Time Limit: 1sec
Sample Input 1:
1
4 2 
1 2 
3 4 
5 6 
7 8
Sample Output 1:
3 7 11 15 
Sample Input 2:
2
2 5 
4 5 3 2 6 
7 5 3 8 9
4 4
1 2 3 4
9 8 7 6
3 4 5 6
-1 1 -10 5
Sample Output 2:
20 32 
10 30 18 -5 

Output:

from sys import stdin

def rowWiseSum(mat, nRows, mCols):
    for row in mat:
        sum=0
        for ele in row:
            sum=sum+ele
        print(sum,end=' ')
        
    #Your code goes here
 


#Taking Input Using Fast I/O
def take2DInput() :
    li = stdin.readline().rstrip().split(" ")
    nRows = int(li[0])
    mCols = int(li[1])
    
    if nRows == 0 :
        return list(), 0, 0
    
    mat = [list(map(int, input().strip().split(" "))) for row in range(nRows)]
    return mat, nRows, mCols


#main
t = int(stdin.readline().rstrip())

while t > 0 :

    mat, nRows, mCols = take2DInput()
    rowWiseSum(mat, nRows, mCols)
    print()

    t -= 1
    
    ****************************
    def lar_Col_Sum(li):
    n=len(li)
    m=len(li[0])
    max_sum=-1
    max_col_Index=-1
    for j in range(m):#going through each column
        sum=0
        for i in range(n):#gowing throw each row
            sum+=li[i][j]
        if sum>max_sum:
            max_col_index=j
            max_sum=sum
    return max_sum,max_col_index
        
li=[[1,2,3,4],[8,7,6,5],[9,10,11,12]]
lar_sum,lar_col_index=lar_Col_Sum(li)
print(lar_sum,lar_col_index)


def lar_Col_Sum(li):
    n=len(li)
    m=len(li[0])
    max_sum=-1
    max_col_Index=-1
    for j in range(m):#going through each column
        sum=0
        for ele in li:
            sum+=ele[j]
        if sum>max_sum:
            max_col_index=j
            max_sum=sum
    return max_sum,max_col_index
        
li=[[1,2,3,4],[8,7,6,5],[9,10,11,12]]
lar_sum,lar_col_index=lar_Col_Sum(li)
print(lar_sum,lar_col_index)
