Check cousins
Send Feedback
Given the binary Tree and two nodes say ‘p’ and ‘q’. Determine whether the two nodes are cousins of each other or not. Two nodes are said to be cousins of each other if they are at same level of the Binary Tree and have different parents.
Do it in O(n).
Input format :
Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take -1 in its place
Line 2 : integer value of p 
Line 3 : Integer value of q
Output format :
true or false
Constraints :
1 <= N <= 10^5
Sample Input :
5 6 10 2 3 4 -1 -1 -1 -1 9 -1 -1 -1 -1
2
4
Sample Output :
true

Python (3.5)
363738394041424344454647484950515253545556575859606162
            if curr.right is not None:
                q1.put(curr.right)
    
    return False

def buildLevelTree(levelorder):
    index = 0
    length = len(levelorder)
    if length<=0 or levelorder[0]==-1:
        return None
********************************************
## Read input as specified in the question.
## Print output as specified in the question.
import queue
class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def checkCousins(root,p,q):
    if root is None:
        return False
    
    # Create a queue for level order traversal
    q1 = queue.Queue()
    q1.put(root)
    
    # Traverse the tree level by level
    while not q1.empty():
        size = q1.qsize()
        parent_of_p = None
        parent_of_q = None
        
        for i in range(size):
            curr = q1.get()
            
            # Check if curr is the parent of p or q
            if curr.left is not None and (curr.left.data == p or curr.left.data == q):
                if parent_of_p is None:
                    parent_of_p = curr
                else:
                    # If p and q have same parent, then they are not cousins
                    if parent_of_p == parent_of_q:
                        return False
            elif curr.right is not None and (curr.right.data == p or curr.right.data == q):
                if parent_of_q is None:
                    parent_of_q = curr
                else:
                    # If p and q have same parent, then they are not cousins
                    if parent_of_p == parent_of_q:
                        return False
            
            # If both p and q are found, check if they have different parents
            if parent_of_p is not None and parent_of_q is not None:
                if parent_of_p != parent_of_q:
                    return True
            
            # Add children of current node to the queue for processing next level
            if curr.left is not None:
                q1.put(curr.left)
            if curr.right is not None:
                q1.put(curr.right)
    
    return False

def buildLevelTree(levelorder):
    index = 0
    length = len(levelorder)
    if length<=0 or levelorder[0]==-1:
        return None
    root = BinaryTreeNode(levelorder[index])
    index += 1
    q = queue.Queue()
    q.put(root)
    while not q.empty():
        currentNode = q.get()
        leftChild = levelorder[index]
        index += 1
        if leftChild != -1:
            leftNode = BinaryTreeNode(leftChild)
            currentNode.left =leftNode
            q.put(leftNode)
        rightChild = levelorder[index]
        index += 1
        if rightChild != -1:
            rightNode = BinaryTreeNode(rightChild)
            currentNode.right =rightNode
            q.put(rightNode)
    return root

# Main
levelOrder = [int(i) for i in input().strip().split()]
root = buildLevelTree(levelOrder)
p = int(input())
q = int(input())
ans = checkCousins(root,p,q)
if ans is True:
    print('true')
else:
    print('false')


