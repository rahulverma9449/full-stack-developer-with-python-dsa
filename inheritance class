# Parent Class
class Vehicle():
    def __init__(self,make,model,fuel):
        self.make=make
        self.model=model
        self.fuel=fuel

# Child Class
class Car(Vehicle):
    def __init__(self,make,model,fuel,air_conditioning,sunroof):
        # Parent Attributes
        Vehicle.make=make
        Vehicle.model=model
        Vehicle.fuel=fuel
        self.air_conditioning=air_conditioning
        self.sunroof=sunroof
myobj=Car("Tesla",2019,"Electric",True,True)
myobj.__dict__

*****************************
Inheritance And Private Memb

# Parent Class
class Vehicle():
    def __init__(self,make,model,fuel):
        self.make=make
        self.__model=model
        self.__fuel=fuel
    def __private_method_parent(self):
        print("This is private")
        

# Child Class
class Car(Vehicle):
    def __init__(self,make,model,fuel,air_conditioning,sunroof):
        # Parent Attributes
        Vehicle.make=make
        Vehicle.__model=model
        Vehicle.__fuel=fuel
        self.air_conditioning=air_conditioning
        self.sunroof=sunroof
    def show_parent_attribute(self):
        print(Vehicle.make," ",Vehicle.__model," ",Vehicle.__fuel)
    def show_privatemethod_ofparent(self):
        self._Vehicle__private_method_parent()
        
myobj=Car("Tesla",2019,"Electric",True,True)
myobj.__dict__
myobj.show_parent_attribute()
myobj.make
myobj.model
myobj.__model
myobj.__private_method_parent()
myobj.show_privatemethod_ofparent()
