Quadruplet Sum
Given an array nums of n integers and integer x, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == x
Store all such possible quadruplets in an 2D array, and return it. The order of the quadruplets does not matter.
Input Format:
First line of input contains an integer n, representing the size of the array.
Second line of input contains n space separated integers.
Third line of input contains an integer x.
Constraints:
1 <= nums.length <= 200
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9
Output Format:
Return all possible quadruplets
Sample Input 1:
6
1 0 -1 0 -2 2 
0
Sample Output1:
-2 -1 1 2   
-2 0 0 2
-1 0 0 1
***************************
##Write your code here, return the answer don't print

def findQuadruplets(nums, target):
    nums.sort()
    n = len(nums)
    quadruplets = set()
    for i in range(n-3):
        for j in range(i+1, n-2):
            left = j+1
            right = n-1
            while left < right:
                currSum = nums[i] + nums[j] + nums[left] + nums[right]
                if currSum == target:
                    quadruplets.add((nums[i], nums[j], nums[left], nums[right]))
                    left += 1
                    right -= 1
                elif currSum < target:
                    left += 1
                else:
                    right -= 1
    return list(quadruplets)

n = int(input())
nums = list(map(int, input().split()))
target = int(input())
result = findQuadruplets(nums, target)
for quadruplet in result:
    print(*quadruplet)
