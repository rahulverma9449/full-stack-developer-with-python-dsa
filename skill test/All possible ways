All possible ways
Given two integers a and b. You need to find and return the count of possible ways in which we can represent the number a as the sum of unique integers raise to the power b.
For example: if a = 10 and b = 2, only way to represent 10 as sum of unique integers raised to power 2 is-
10 = 1^2 + 3^2 
Hence, answer is 1.
Note : x^y represents x raise to the power y
Input Format:
The first line of input contains two space separated integers, that denote the value of a and b.
Output Format:
The first and only line of output contains count of ways in which a can be represented as sum of unique integers raised to power b.
Constraints :
1 <= a <= 10^4
1 < b <= 20
Time Limit: 1 second
Sample Input 1 :
10 2
Sample Output 1 :
1
Sample Input 2 :
100 2
Sample Output 2 :
3
Explanation:
Following are the three ways: 
1. 100 = 10^2
2. 100 = 8^2 + 6^2
3. 100 = 7^2+5^2+4^2+3^2+1^2
***************************************
from sys import stdin , setrecursionlimit
setrecursionlimit(10**8)


def count_ways(a, b, curr_sum, curr_num):
    # base case
    if curr_sum == a:
        return 1
    if curr_sum > a or curr_num <= 0:
        return 0

    # recursive case
    count = 0
    # include current number raised to the power of b
    count += count_ways(a, b, curr_sum + curr_num**b, curr_num - 1)
    # exclude current number
    count += count_ways(a, b, curr_sum, curr_num - 1)
    return count

def allWays(x, n) :
    largest_num = int(x**(1/n))
    count = count_ways(x, n, 0, largest_num)
    return count

# Main
a,b = map(int, input().split()) 
print(allWays(a,b))








# # Main
# a,b = [int(x) for x in stdin.readline().strip().split()] 
# print(allWays(a,b))
