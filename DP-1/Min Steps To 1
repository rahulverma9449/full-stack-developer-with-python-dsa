Min Steps To 1
Send Feedback
Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - ­1) ,
2.) If n is divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If n is divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Input format :
The first and the only line of input contains an integer value, 'n'.
Output format :
Print the minimum number of steps.
Constraints :
1 <= n <= 10 ^ 6
Time Limit: 1 sec
Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 
Sample Input 2 :
7
Sample Output 2 :
3
Explanation of Sample Output 2 :
For n = 7
Step 1 :  n = 7 ­- 1 = 6
Step 2 : n = 6  / 3 = 2 
Step 3 : n = 2 / 2 = 1  

*******************************
from sys import stdin
from sys import maxsize as MAX_VALUE



def countMinStepsToOne(n) :
    if n == 1:
        return 0

    # Initialize an array to store minimum steps for each number from 0 to n
    steps = [0] * (n + 1)

    # Calculate minimum steps for each number from 2 to n
    for i in range(2, n + 1):
        # Initialize current step count to maximum value
        min_steps = MAX_VALUE
        
        # Subtract 1 and check if it reduces steps
        if i - 1 >= 1:
            min_steps = min(min_steps, steps[i - 1])

        # Divide by 2 if possible and check if it reduces steps
        if i % 2 == 0:
            min_steps = min(min_steps, steps[i // 2])

        # Divide by 3 if possible and check if it reduces steps
        if i % 3 == 0:
            min_steps = min(min_steps, steps[i // 3])

        # Assign minimum steps to current number
        steps[i] = min_steps + 1

    # Return the minimum steps required for n
    return steps[n]
    pass



#main
n = int(stdin.readline().rstrip())
print(countMinStepsToOne(n))
